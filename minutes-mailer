#!/usr/bin/env python
'''send technocrats minutes'''

from __future__ import absolute_import, print_function, unicode_literals
import argparse
import datetime
import sys
import os.path
import getpass
import re
import ConfigParser
import smtplib
import keyring
from email.mime.text import MIMEText
from request_tracker import RT

class Error(Exception):
    '''Base class for exceptions '''
    def __init__(self, msg, exitval):
        Exception.__init__(self, msg)
        self.msg = msg
        self.exitval = exitval

class Config():
    '''creates a config object'''
    def __init__(self):
        '''creates dictionaries with config vars'''
        self.local_conf = os.path.expanduser('~/.minutes_mailer')
        self.rtconf, self.mailconf, self.miscconf  = self.loadconfig()

    def loadconfig(self):
        '''loads configuration file'''
        config = ConfigParser.SafeConfigParser()
        config.read('/etc/mm.cfg')
        rt = {}
        rt['host'] = config.get('rt', 'rt_host')
        rt['queue'] = config.get('rt', 'rt_queue')
        mail = {}
        mail['minutes list'] = config.get('mail', 'minutes_list')
        mail['queue'] = config.get('mail', 'rt_queue_email')
        misc = {}
        misc['meeting day'] = int(config.get('meeting', 'day'))
        if  not os.path.isfile(self.local_conf):
            print('No local configuration found...creating')
            self.create_config(self.local_conf)
        config.read(self.local_conf)
        mail['email'] = config.get('mail', 'email')
        mail['host'] = config.get('mail', 'host')
        if config.has_option('mail','nopassword'):
            mail['nopassword'] = True
        if config.has_option('minutes','path'):
            misc['minutes path'] = config.get('minutes','path')
        else:
            misc['minutes path'] = None
        rt['user'] = config.get('rt', 'rtuser')
        if config.has_option('rt','nopassword'):
            rt['nopassword'] = True
        return rt, mail, misc

    def create_config(self, configfile):
        '''create local config file'''
        config = ConfigParser.SafeConfigParser()
        userconf = self._get_user_config()
        config.add_section('minutes')
        if userconf['path']:
            config.set('minutes', 'path', userconf['path'])
        config.add_section('mail')
        config.set('mail', 'host', userconf['mailhost'])
        config.set('mail', 'email', userconf['email'])
        if userconf['emailpass']:
            set_password('email', userconf['email'], userconf['emailpass'])
        else:
            config.set('mail', 'nopassword', 'true')
        if userconf['requires_ssl']:
            config.set('mail', 'requires_ssl', 'true')
        if userconf['requires_auth']:
            config.set('mail', 'requires_auth', 'true')
        config.add_section('rt')
        config.set('rt', 'rtuser', userconf['rtuser'])
        if userconf['rtpass']:
            set_password('rt', userconf['rtuser'], userconf['rtpass'])
        else:
            config.set('rt', 'nopassword', 'true')
        try:
            with open(configfile, 'wb') as cfile:
                config.write(cfile)
        except ConfigParser.Error as err:
            print('cound not write config file. Eror:')
            sysexit(err.args, 73)
        # add comment about path if not set
        if not userconf['path']:
            self._add_path_comment(configfile)
        else:
            print('Local configuration file'  + config + 'created')

    def _get_user_config(self):
        '''returns user config options as dict'''
        conf = {}
        conf['mailhost'] = 'mail.freegeek.org'
        if not yes_or_no('use %s as your mailhost' %(conf['mailhost'])):
            conf['mailhost'] = raw_input('Enter the correct host: ')
            if yes_or_no('Does this host require you to log into send email?'):
                conf['requires_auth'] = 'True'
            else:
                conf['requires_auth'] = None
            if yes_or_no('Use SSL to connect'):
                conf['requires_ssl'] = 'True'
            else:
                conf['requires_ssl'] = None
        else:
            conf['requires_ssl'] = 'True'
            conf['requires_auth'] = 'True'
        conf['email'] =  getpass.getuser() + '@freegeek.org',
        if not yes_or_no('Is this your email %s' %(conf['email'])):
            conf['email'] =  raw_input('Enter your email: ')
        if conf['requires_auth']:
            print('Please enter the password associated with this account\n' 
            'This will be stored in your keyring\n' 
            'enter a blank line if you wish to be prompted every time instead')
            conf['emailpass'] = getpass.getpass()
        else:
            conf['emailpass'] = None
        print("Enter the directory where you wish to store minutes\n"  
            "This can be an absolute path or relative to your home directory\n"
            "leave blank if you store them in your home directory or don't care"
            ) 
        conf['path'] = raw_input('Enter path: ')
        conf['rtuser'] = raw_input('Please enter your RT user')
        print('Please enter the password associated with this account\n' 
            'This will be stored in your keyring\n' 
            'enter a blank line if you wish to be prompted every time instead')
        conf['rtpass'] = getpass.getpass()
        return conf

    def _add_path_comment(self, configfile):
        '''adds a comented out line about how to specify a path'''
        with open(configfile, 'a') as f:
            contents = [
            '# uncomment the next line to specify the directory where ' \
                    'minutes are normally stored (recommended)',
            '#path = [directory goes here, relative to ~/]'
            ]
            try: 
                f.write('\n'.join(contents))
                print('Local configuration file %s created' %(configfile)) 
            except IOError:
                err = ('Could not write to local configuration file: %s' 
                        %(configfile)) 
                sysexit(err, 73)

    def get_rtconf(self):
        '''get rtconfig'''
        rturl = 'http://' + self.rtconf['host'] + '/REST/1.0/'
        rtqueue = self.rtconf['queue']
        return rturl, rtqueue
    

    def get_rt_user(self):
        '''returns rt user'''    
        return self.rtconf['user']
    
    def get_rt_password(self):
        '''returns rt password from conf file or none if nopassword set'''
        if 'nopassword' in self.rtconf:
            rtpass = None
        else:
            rtpass = get_password('rt', rtuser)
        return rtpass

    def get__user_email(self):
        '''returns user's  email address'''    
        return self.mailconf['email']

    def get_mail_password(self):
        '''returns mail password from conf file or none if nopassword set'''
        if 'nopassword' in mconf:
            password = None
        else:
            password = get_password('mail', email)
        return password
    
    def get_mail_host(self):
        '''returns mail host'''
        return self.mailconf['host']

    def get_queue_email(self):
        '''returns email address associated with (technocrats) queue'''
        return self.mailconf['queue']

    def get_minutes_list(self):
        '''returns email address associated with  minutes list'''
        return self.mailconf['minutes list']


    def get_day(self):
        '''get day from config'''
        return self.miscconf['meeting day']

    def get_minutes_path(self):
        '''get path from config if any'''
        if 'minutes path' in self.misc:
            return miscconf['minutes path']
        else:
            return None

def read_options():
    '''read command line options'''
    parser = argparse.ArgumentParser()
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument("-d", "--send-draught", 
            help="email draught minutes", action="store_true")
    group.add_argument("-m", "--send-minutes", 
            help="Send final minutes. Supply ticket number as an argument",
            action="store")
    group.add_argument("-n", "--new-file", 
            help="create a blank minutes file", action="store_true")
    group.add_argument("-C", "--create-config", 
            help="(re)Create a config file", action="store_true")
    parser.add_argument("-D", "--date", 
            help="date of minutes. Not normally needed unless the minutes' \
                    'are sent out more than a week late", 
            action="store")
    parser.add_argument("-f", "--file", 
            help="file containing minutes", action="store")
    args = parser.parse_args()
    if not args.date:
        if args.send_draught:
            args.date = 'today'
        elif args.send_minutes:
            args.date = 'lastweek'
    if args.send_draught:
        action = 'draught'
    elif args.new_file:
        action = 'new'
    elif  args.send_minutes:
        action = args.send_minutes
    elif args.create_config:
        action = 'create_config'
    if args.file:
        mfile = args.file
    else:
        mfile = None
    return action, args.date, mfile

def get_password(section,  user):
    '''get a password from users keyring'''
    return keyring.get_password('minutes-mailer-' + section, user)

def set_password(section, user, password):
    '''set a password in users keyring'''
    keyring.set_password('minutes-mailer-' + section, user, password)

def setup_object(url, user, password):
    '''create request tracker object and login'''
    rt_object = RT(url, user, password)
    if not rt_object.login():
        raise Error('Could not login to RT', 3)
    else:
        return rt_object

def get_rt_user_details(config):
    '''returns  rt user and password'''
    user = config.get_rt_user()
    password =  config.get_rt_password()
    if not password:
        password = getpass.getpass('Enter RT password for %s' %(user))
    return user, password

def get_email_address(config): 
    '''returns  rt user and password'''
    user = config.get__email_adress()
    password =  config.get_mail_password()
    if not password:
        password = getpass.getpass('Enter RT password for %s' %(user))
    return user, password

def get_file(date, path):
    '''returns default file name + path given date(time object)'''
    minutes_file = 'minutes' +  '.' + str(date)
    if path:
        minutes_file = path + '/' + minutes_file
    if minutes_file[0:2] == '~/':
        return os.path.expanduser(minutes_file)
    elif minutes_file[0] == '/':
        return minutes_file
    else:
        return os.path.expanduser('~/' + minutes_file)


# TODO rewrite. move get pass here and check
# figure out how to handle wrong passwords
# create get_rtpass(and user) (move out of rtconf)
# have it return if password set then create mech for resetting?
# thern create func that calls setup_object like this one that can 
# be called recursively so we can reset pass word then call it again
# i.e. split this in two
#    rtconf = config['rt']
#    rturl, rtqueue, rtuser, rtpass = get_rtconf(rtconf)
def login_to_rt(url, user, password):
    '''wrapper for setup_object that verifies user password'''
    try: 
        rtobj = setup_object(url, user, password)
        return rtobj
    except Error:
        print('could not log in to RT')
        password = getpass.getpass('Enter RT password')
        set_password('rt', user, password)
        # TODO will this work?? maybe not
        return login_to_rt(url, user, password)



def match_minutes(subject):
    '''checks to see if subject lines looks like minutes'''
    match = re.compile('minutes', re.IGNORECASE)
    if match.search(subject):
        return True
    else:
        return False

def get_date(when, day):
    '''return the date for n weeks ago'''
    # calculate the date 
    if when == 'today':
        return weeks_ago(0, day)
    elif when == 'lastweek':
        return weeks_ago(1, day)
    else:
        # assume a date was specified and just return it
        # should only be the case with late minutes
        return when

def weeks_ago(weeks, weekdayno):
    '''Return a datetime object that represents the date of the day 
    n weeks ago. 0 = today or the last occurence of  that day
    1 = last week etc '''
    days = weeks * 7
    today = datetime.date.today()
    # weekday of nearest day
    weekday = datetime.date.weekday(today) % int(weekdayno)
    timedelta = datetime.timedelta(weekday)
    date = today - timedelta
    # calculate for days ago
    timedelta = datetime.timedelta(days)
    return date - timedelta

def load_file(mfile):
    '''load file contents and return them as string'''
    with open(mfile,'rU') as f:
        contents = f.read()
    return contents


def yes_or_no(warning=None):
    '''get a yes no answer, true if yes'''
    print(warning + '[Y/N]?')
    answer =  sys.stdin.read(1)
    if answer == 'y' or answer == 'Y':
        return True
    elif answer == 'n' or answer == 'N':
        return False
    else:
        print('please answer y[es] or [n]o')
        return yes_or_no(warning)



def sysexit(message, exit_value):
    '''print exit message and exit with exit_value'''
    print(message)
    sys.exit(exit_value)


def send_email(config, mailto, subject, body):
    '''sends an email'''
    mail_host = config.get_mailhost()
    if 'requires_ssl' in mailconf:
        smtp = smtplib.SMTP_SSL(mail_host)
    else:
        smtp = smtplib.SMTP(mail_host)
    if 'requires_ssl' in mailconf:
        email, password = get_mail_user_details(config)
        try:
            smtp.login(email, password)
        except smtplib.SMTPAuthenticationError:
            sysexit('Could not login into the mail server as %s.' 
                    'You might want to run this program with the' 
                            '--create-config option to reset them' 
                            %(email), 1)
    else:
        email = config.get_email_address()
    msg = MIMEText(body)
    msg['Subject'] = subject
    msg['From'] = email
    msg['To'] = mailto
    msg.add_header('X-Mailer', 'minutes-mailer')
    msg.add_header('X-Sent-By-Robot', 
            'The city\'s central computer told you? R2D2, you know \
                    better than to trust a strange computer!')
    try:
        smtp.sendmail(email, mailto, msg.as_string())
        sent = True
    except smtplib.SMTPRecipientsRefused:
        print('could not deliver mail to %s ,recipient refused' %(mailto))
    except smtplib.SMTPSenderRefused:
        print('could not deliver mail to %s, sender %s refused'
                %(mailto, email))
    except (smtplib.SMTPResponseException, smtplib.SMTPException):
        print('Something went wrong')
        print('could not deliver mail to %s' %(mailto))
        sent = False
    smtp.quit()
    if sent == True:
        return True
    else:
        return False

        
def create_new_minutes_file(config):
    '''creates a blank minutes file'''
    day = config.get_day()
    path  = config.get_minutes_path()
    minutes_date = get_date('today', day)
    minutes_file = get_file(minutes_date, path)
    if not os.path.exists(minutes_file):
        try:
            open(minutes_file,'a').close()
            print('Created ' + minutes_file)
            return True
        except IOError:
            error_msg = 'Could not write to '  +  minutes_file
            sys.exit(error_msg, 73)
    else:
        raise Error("Minutes files already exists!", 1)


def send_draught(config, date, mfile=None):
    '''send draught minutes'''
    day = config.get_day()
    path  = config.get_minutes_path()
    queue_email = config.get_queue_email()
    minutes_date = get_date(date, day)
    subject = 'DRAFT: Technocrats Minutes ' + str(minutes_date)
    # get contents of minutes
    if not mfile:
        mfile = get_file(minutes_date, path)
    msg = load_file(mfile)
    if not send_email(mail, queue_email, subject, msg):
        raise Error('Could not send draught minutes', 3)


def send_final(config, ticketno, date, mfile=None):
    '''send final minutes'''
    day = config.get_day()
    path  = config.get_minutes_path()
    minutes_date = get_date(date, day)
    minuteslist = config.get_minutes_list()
    subject = 'Technocrats Minutes ' + str(minutes_date)
    # get contents of minutes
    if not mfile:
        mfile = get_file(date, path)
    msg = load_file(mfile)
    # send minutes to minutes list
    if not send_email(mail, minuteslist, subject, msg):
        raise Error("Could not send email to %s"  %(minuteslist), 3)
    else:
        print('sent minutes to %s' %(minuteslist))
    # check for valid ticket in RT, add minutes as comment, then resolve.
    rturl, rtqueue = config.get_rtconf(rtconf)
    rtuser, rtpass = get_rt_user_details(config)
    ticket = login_to_rt(rturl, rtuser, rtpass)
    try:
        isvalid = ticket.is_valid_ticket(rtqueue, ticketno)
        if not isvalid:
            raise Error('Not a valid ticket', 1)
        else:
            subject = ticket.get_subject(ticketno)
            if not match_minutes(subject):
                print('the subject of ' + str(ticketno) + ' is ' + subject)
                print("This does not look like the correct  ticket")
                if not yes_or_no('Proceed'):
                    raise Error('ticket mismatch, aborting.', 0)
    except:
        raise Error('could not connect to RT. \
            Check your network connection and try again', 3)
    if not ticket.add_comment(ticketno, msg):
        raise Error("Could not add minutes to ticket " + ticketno, 3)
    else:    
        print('added  minutes to ticket ' + ticketno)
    if not ticket.set_status(ticketno, 'resolved'):
        raise Error("Could resolve ticket " + ticketno, 3)
    else:    
        print('Resolved ticket ' + ticketno)
        

def main():
    action, date, minutesfile = read_options()
    config = Config()
    
    if action == 'create_config':
        local_config = config.local_conf
        if os.path.isfile(local_config):
            print('(You may safely answer no if this is the first'
                    ' time you have run this program)')
            if yes_or_no('config already exists. Overwrite'):
                create_config(local_config)
    
    elif action == 'new':
        try:
            create_new_minutes_file(config)
        except Error as error:
            sysexit(error.msg, error.exitval)

    elif action == 'draught':
        try:
            send_draught(config, date, minutesfile)
        except Error as error:
            sysexit(error.msg, error.exitval)
    else:
        # send final minutes, action should contain ticket number
        try:
            send_final(config, action, date, minutesfile)
        except Error as error:
            sysexit(error.msg, error.exitval)

    sys.exit(0)

if __name__ == "__main__":
    main()
